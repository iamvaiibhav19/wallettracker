generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Currency {
  USD
  EUR
  INR
  GBP
  JPY
  AUD
  CAD
  CNY
}

model User {
  id           String        @id @default(uuid())
  name         String?
  email        String        @unique
  password     String?
  currency     Currency? 
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  accounts     Account[]
  transactions Transaction[]
  otps         Otp[]
  sessions     Session[]
  categories   Category[]
  budgets Budget[]
  debts        Debt[]
}

enum TransactionType {
  income
  expense
  transfer
  lend
}

model Category {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
  budgets Budget[]

}

model Transaction {
  id                   String          @id @default(uuid())
  amount               Float
  type                 TransactionType
  categoryId           String?
  category             Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  description          String?
  date                 DateTime        @default(now())
  accountId            String
  userId               String
  targetName           String?         
  reminderDate         DateTime?       
  destinationAccountId String?         
  debtId               String?         

  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  account              Account         @relation("AccountTransactionsFrom", fields: [accountId], references: [id])
  destinationAccount   Account?        @relation("AccountTransactionsTo", fields: [destinationAccountId], references: [id])
  user                 User            @relation(fields: [userId], references: [id])

  debt                 Debt?           @relation("DebtTransactions", fields: [debtId], references: [id])  // <-- relation name added here
}

model Account {
  id                   String        @id @default(uuid())
  name                 String
  type                 String
  balance              Float         @default(0)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  userId               String
  user                 User          @relation(fields: [userId], references: [id])
  transactions         Transaction[] @relation("AccountTransactionsFrom") // relation to transactions from this account
  transferTransactions Transaction[] @relation("AccountTransactionsTo") // relation to transactions to this account (self-transfer)
}

model Otp {
  id        String   @id @default(uuid())
  code      String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Budget {
  id         String   @id @default(uuid())
  userId     String
  categoryId String
  limit      Float
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([userId, categoryId, startDate, endDate]) // Avoid duplicates
}

model Debt {
  id            String         @id @default(uuid())
  userId        String
  name          String
  principal     Float
  outstanding   Float
  monthlyEMI    Float
  interestRate  Float
  startDate     DateTime
  endDate       DateTime?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user          User           @relation(fields: [userId], references: [id])

  transactions  Transaction[]  @relation("DebtTransactions") 
}