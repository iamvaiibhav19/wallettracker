generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Currency {
  USD
  EUR
  INR
  GBP
  JPY
  AUD
  CAD
  CNY
  // Add more as needed
}

model User {
  id           String        @id @default(uuid())
  name         String?
  email        String        @unique
  password     String?
  currency     Currency?     // ðŸ‘ˆ use enum here
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  accounts     Account[]
  transactions Transaction[]
  otps         Otp[]
  sessions     Session[]
}



enum TransactionType {
  income
  expense
  transfer
  lend
}

model Transaction {
  id               String   @id @default(uuid())
  amount           Float
  type             TransactionType
  category         String?
  description      String?
  date             DateTime @default(now())
  accountId        String
  userId           String
  targetName       String?      // for lend
  reminderDate     DateTime?    // for lend
  destinationAccountId String?  // self-transfer to another account
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  account          Account @relation("AccountTransactionsFrom", fields: [accountId], references: [id])
  destinationAccount Account? @relation("AccountTransactionsTo", fields: [destinationAccountId], references: [id])  // Reverse relation with unique name
  user             User    @relation(fields: [userId], references: [id])
}

model Account {
  id            String       @id @default(uuid())
  name          String
  type          String
  balance       Float        @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  transactions  Transaction[] @relation("AccountTransactionsFrom")  // relation to transactions from this account
  transferTransactions Transaction[] @relation("AccountTransactionsTo")  // relation to transactions to this account (self-transfer)
}




model Otp {
  id        String     @id @default(uuid())
  code      String
  expiresAt DateTime
  verified  Boolean    @default(false)
  createdAt DateTime   @default(now())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
}

model Session {
  id        String     @id @default(uuid())
  token     String     @unique
  createdAt DateTime   @default(now())
  expiresAt DateTime
  userId    String
  user      User       @relation(fields: [userId], references: [id])
}
